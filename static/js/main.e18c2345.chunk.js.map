{"version":3,"sources":["components/CoinHeap/index.js","components/TickerTape/index.js","components/Backend/util.js","components/Backend/gameState.js","components/Backend/move.js","components/Backend/gamePlay.js","components/GameBoard/index.js","components/GameSetup/index.js","components/NimZap/index.js","App.js","reportWebVitals.js","index.js"],"names":["KeyPad","name","index","coinCount","makePlayerMove","console","log","countChoices","Array","keys","map","n","countClick","e","cNum","parseInt","target","dataset","choice","className","cnum","onClick","data-choice","CoinHeap","assert","Styles","styled","div","Table","columns","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","TickerTape","movesLog","React","useMemo","Header","accessor","getRandomInt","min","max","Math","ceil","floor","random","GameState","heapCount","coinCounts","this","heapNames","split","slice","heapMap","Map","entries","set","size","str","v","join","_","Move","gameState","lastMoveNum","moverName","heapNum","count","newCoinCounts","from","newMoveNum","newMovesLog","moveInfo","coinCountStr","unshift","GamePlay","singletonCount","forEach","value","key","doubletonCount","xy","filter","x","t1","length","getRandomMove","heapNum1","count1","DisplayInstructions","id","FirstMover","chooseFirstMover","useState","radioValue","setRadioValue","changeFirstMover","currentTarget","ButtonGroup","toggle","radio","idx","ToggleButton","type","variant","checked","onChange","GameBoard","gameMode","nextMover","heapCountStr","setPlayAgain","displayInstructions","setDisplayInstructions","displayFirstMover","setDisplayFirstMover","mover","setMover","setFirstMover","createRandomCoinCounts","setCoinCounts","setMovesLog","moveNum","setMoveNum","hm","move","generateNextMove","coinsLeft","winMessage","Button","getMove","makeComputerMove","HelpInstructions","textStrings","title","OverlayTrigger","trigger","placement","overlay","Popover","Title","as","Content","HeapCount","chooseHeapCount","heapCountValue","setHeapCountValue","changeHeapCount","GameSetup","firstMover","setHeapCount","playAgain","NimZap","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e18c2345.chunk.js","sourcesContent":["/**\n * Created by J.Vidya Sagar on 12/11/20.\n */\n\nimport React from 'react'\n\nimport './style.scss'\n\nconst CoinRow = ({name, coinCount}) => {\n    const choiceNums = [...Array(coinCount).keys()].map(n => n + 1)\n\n    return (\n        <>\n            <ul className={'coinList'}>\n            {\n                choiceNums.map(cnum =>\n                        <li key={cnum} className={'coinListItem'}>\n                            {' '}\n                        </li>\n                )\n            }\n            </ul>\n        </>\n    );\n}\n\nconst KeyPad = ({name, index, coinCount, makePlayerMove}) => {\n    console.log(`KeyPad: start: (name, index, coinCount)=(${name}, ${index}, ${coinCount})`)\n    const countChoices = [...Array(coinCount).keys()].map(n => n + 1)\n\n    const countClick = e => {\n        console.log(`countClick(): e: ${e}`)\n        const cNum = parseInt(e.target.dataset.choice)\n\n        makePlayerMove(index, cNum)\n        console.log(`chosen: heap-count = ${name}-${cNum}`)\n    }\n\n    return (\n        <>\n            <ul className={'choiceNumList'}>\n            {\n                countChoices.map(cnum =>\n                        <li key={cnum} className={'choiceNumItem'}\n                            onClick={countClick}  data-choice={cnum}>\n                            {cnum}\n                        </li>\n                )\n            }\n        </ul>\n        </>\n    );\n}\n\nexport default function CoinHeap({name, index, coinCount, makePlayerMove}) {\n    console.log(`KeyPad: start: coinCount=${coinCount}`)\n    console.assert((coinCount > 0) && (coinCount < 10), `===>  -${coinCount}- is invalid`)\n    return (\n        <div className={'heapContainer'}>\n            {\n                coinCount > 0 &&\n                <div className={'keyPad'}>\n                    {/*<CoinRow name={name} coinCount={coinCount}/>*/}\n                    <h4 className={'heapName'}>{name}</h4>\n                    <KeyPad\n                        name={name}\n                        index={`${index}`}\n                        coinCount={coinCount}\n                        makePlayerMove={makePlayerMove}/>\n                </div>\n            }\n        </div>\n    );\n}\n","/**\n * Created by J.Vidya Sagar on 12/11/20.\n */\n\n// import React from 'react'\n//\n// import './style.scss'\n//\n// const CoinRow = ({name, coinCount}) => {\n//     const choiceNums = [...Array(coinCount).keys()].map(n => n + 1)\n//\n//     return (\n//         <>\n//             <ul className={'coinList'}>\n//             {\n//                 choiceNums.map((cnum, index) =>\n//                         <li key={cnum} className={'coinListItem'}>\n//                             {' '}\n//                         </li>\n//                 )\n//             }\n//             </ul>\n//         </>\n//     );\n// }\n//\n// const KeyPad = ({name, coinCount, updateCoinCounts}) => {\n//     const choiceNums = [...Array(coinCount).keys()].map(n => n + 1)\n//\n//     const choiceNumClick = e => {\n//         console.log(`choiceNumClick(): e: ${e}`)\n//         const cNum = parseInt(e.target.dataset.choice)\n//\n//         const letMap = {\n//             'A': 0,\n//             'B': 1,\n//             'C': 2,\n//             'D': 3,\n//             'E': 4\n//         }\n//\n//         updateCoinCounts(letMap[name], cNum)\n//         console.log(`chosen: heap-count = ${name}-${cNum}`)\n//     }\n//\n//     return (\n//         <>\n//             <ul className={'choiceNumList'}>\n//             {\n//                 choiceNums.map((cnum, index) =>\n//                         <li key={cnum} className={'choiceNumItem'} onClick={choiceNumClick}  data-choice={cnum}>\n//                             {cnum}\n//                         </li>\n//                 )\n//             }\n//         </ul>\n//         </>\n//     );\n// }\n//\n// export default function TickerTape({name, coinCount, updateCoinCounts}) {\n//     console.log(\"TickerTape: start\")\n//\n//     return (\n//         <div className={'movesRecordContainer'}>\n//             <div className={'xyz'}>\n//                 <h4 className={'xyz'}> Moves Record</h4>\n//                 {/*<h4 className={'heapName'}>{name}</h4>*/}\n//                 {/*<CoinRow name={name} coinCount={coinCount}/>*/}\n//                 {/*<KeyPad name={name}  coinCount={coinCount} updateCoinCounts={updateCoinCounts}/>*/}\n//             </div>\n//         </div>\n//     );\n// }\n\n\n\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useTable } from 'react-table'\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n  margin-top: 48px;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tbody tr:nth-child(odd) {\n       // background-color: #ccc;\n       background-color: #e6ffe6;\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data }) {\n    // Use the state and functions returned from useTable to build your UI\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({\n        columns,\n        data,\n    })\n\n    // Render the UI for your table\n    return (\n        <table {...getTableProps()}>\n            <thead>\n            {headerGroups.map(headerGroup => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                        <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n                    ))}\n                </tr>\n            ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n            {rows.map((row, i) => {\n                prepareRow(row)\n                return (\n                    <tr {...row.getRowProps()}>\n                        {row.cells.map(cell => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    )\n}\n\nfunction TickerTape({movesLog}) {\n    // const columns = React.useMemo(\n    //     () => [\n    //         {\n    //             Header: 'Name',\n    //             columns: [\n    //                 {\n    //                     Header: 'First Name',\n    //                     accessor: 'firstName',\n    //                 },\n    //                 {\n    //                     Header: 'Last Name',\n    //                     accessor: 'lastName',\n    //                 },\n    //             ],\n    //         },\n    //         {\n    //             Header: 'Info',\n    //             columns: [\n    //                 {\n    //                     Header: 'Age',\n    //                     accessor: 'age',\n    //                 },\n    //                 {\n    //                     Header: 'Visits',\n    //                     accessor: 'visits',\n    //                 },\n    //                 {\n    //                     Header: 'Status',\n    //                     accessor: 'status',\n    //                 },\n    //                 {\n    //                     Header: 'Profile Progress',\n    //                     accessor: 'progress',\n    //                 },\n    //             ],\n    //         },\n    //     ],\n    //     []\n    // )\n\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Move #',\n                accessor: 'Move #',\n            },\n            {\n                Header: 'Made by',\n                accessor: 'Made by',\n\n            },\n            {\n                Header: 'Before',\n                accessor: 'Before',\n            },\n            {\n                Header: 'Move',\n                accessor: 'Move',\n            },\n            {\n                Header: 'After',\n                accessor: 'After',\n            },\n            //\n            //\n            // {\n            //     Header: 'Name',\n            //     columns: [\n            //         {\n            //             Header: 'First Name',\n            //             accessor: 'firstName',\n            //         },\n            //         {\n            //             Header: 'Last Name',\n            //             accessor: 'lastName',\n            //         },\n            //     ],\n            // },\n            // {\n            //     Header: 'Info',\n            //     columns: [\n            //         {\n            //             Header: 'Age',\n            //             accessor: 'age',\n            //         },\n            //         {\n            //             Header: 'Visits',\n            //             accessor: 'visits',\n            //         },\n            //         {\n            //             Header: 'Status',\n            //             accessor: 'status',\n            //         },\n            //         {\n            //             Header: 'Profile Progress',\n            //             accessor: 'progress',\n            //         },\n            //     ],\n            // },\n        ],\n        []\n    )\n\n    // const data = React.useMemo(() => makeData(20), [])\n    const data = React.useMemo(() => movesLog, [movesLog])\n\n    return (\n        <Styles>\n            <Table columns={columns} data={data} />\n        </Styles>\n    )\n}\n\nexport default TickerTape\n","\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n","import {useState} from \"react\";\n\n/***\n *\n NimZap - Notes\n\n Board properties \n     heap-count ( # of heaps containing coins)\n     Singleton-count ( # of heaps that contain only one coin)\n\n Winning positions\n     (Heap-count == 1) — take all coins from the heap\n     (Heap-count == 2) And (singleton-count == 1) — take all but one of the coins in the non-singleton heap\n     (Heap-count == 3) And (singleton-count == 2) — take all coins from the non-singleton heap.\n     --- ??? -- (Heap-count == 2) And (singleton-count == 0) and (doubleton-count == 1)— take all but one of the coins in the non-doubleton heap\n\n Losing positions\n    (Heap-count == 2) And (singleton-count == 2) — what you choose won’t make a difference. Make a random choice.\n */\n\n// function getRandomInt(min, max) {\n//     min = Math.ceil(min);\n//     max = Math.floor(max);\n//     return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n// }\n\nimport {getRandomInt} from \"./util\";\n\nexport default class GameState {\n    constructor({heapCount, coinCounts}) {\n        this.heapNames = \"ABCDEFGHI\".split('').slice(0, heapCount);\n        this.coinCounts = coinCounts;\n\n        this.heapMap = new Map()\n\n        for (const [index, name] of this.heapNames.entries()) {\n            if (coinCounts[index] > 0) {\n                this.heapMap.set(name, this.coinCounts[index])\n            }\n        }\n\n        this.heapCount = this.heapMap.size\n        // this.singletonCount = 0\n        //\n        // this.heapMap.forEach((value, key, map) => {\n        //     if (value === 1) {\n        //         this.singletonCount += 1\n        //     }\n        // })\n        //\n        // this.doubletonCount = 0\n        //\n        // this.heapMap.forEach((value, key, map) => {\n        //     if (value === 2) {\n        //         this.doubletonCount += 1\n        //     }\n        // })\n    }\n\n    static createRandomCoinCounts(heapCount) {\n        return [...Array(heapCount).keys()].map(_ => getRandomInt(1, 10))\n    }\n\n    coinCountStr(coinCounts) {\n        // const str = coinCounts.map((v, index) => `${this.heapNames[index]}${v}`).join(\"-\")\n        const str = coinCounts.map((v, index) => `${this.heapNames[index]}${v}`).join(\" | \")\n        console.log(`coinCountStr(): (coinCounts, str) = ([${coinCounts}], ${str})`)\n\n        return str\n    }\n\n    coinsLeft() {\n        return (this.heapMap.size > 0)\n    }\n}\n","\n\nexport default class Move {\n    constructor(movesLog) {\n        this.movesLog = movesLog\n    }\n\n    generateNextMove(gameState, lastMoveNum, moverName, heapNum, count) {\n        let newCoinCounts = Array.from(gameState.coinCounts)\n        newCoinCounts[heapNum] -= count\n\n        const newMoveNum  = lastMoveNum  + 1\n\n        let newMovesLog = Array.from(this.movesLog)\n        const moveInfo = {\n            'Move #': newMoveNum,\n            'Made by': moverName,\n\n            'Before': gameState.coinCountStr(gameState.coinCounts),\n            'Move': `${gameState.heapNames[heapNum]}${count}`,\n            'After': gameState.coinCountStr(newCoinCounts),\n        }\n        // newMovesLog.push(moveInfo)\n        newMovesLog.unshift(moveInfo)\n\n        return {\n            newMoveNum,\n            newCoinCounts,\n            newMovesLog,\n        }\n    }\n}\n","\nimport {getRandomInt} from \"./util\";\n\nexport default class GamePlay {\n    constructor(heapCount, coinCounts) {\n        this.heapNames = \"ABCDEFGHI\".split('').slice(0, heapCount);\n        this.coinCounts = coinCounts;\n\n        this.heapMap = new Map()\n\n        for (const [index, name] of this.heapNames.entries()) {\n            if (coinCounts[index] > 0) {\n                this.heapMap.set(name, this.coinCounts[index])\n            }\n        }\n\n        this.heapCount = this.heapMap.size\n\n        this.coinCounts = coinCounts\n\n        this.singletonCount = 0\n\n        this.heapMap.forEach((value, key, map) => {\n            if (value === 1) {\n                this.singletonCount += 1\n            }\n        })\n\n        this.doubletonCount = 0\n\n        this.heapMap.forEach((value, key, map) => {\n            if (value === 2) {\n                this.doubletonCount += 1\n            }\n        })\n    }\n\n    getRandomMove() {\n        const xy = this.coinCounts.map((count, index) => ({index, count}))\n                                  .filter(x => x.count > 0)\n\n        const t1 = getRandomInt(0, xy.length)\n        const heapNum = xy[t1].index\n        const count = getRandomInt(1, xy[t1].count + 1)\n\n        return {heapNum, count}\n    }\n\n    getMove() {\n        let heapNum = -1\n        let count = -1\n\n        if (this.heapCount === 1) {\n            console.log(`\\n--- CASE #1: ALL COINS FROM THE ONLY NONEMPTY HEAP`)\n\n            // take all coins from the only non-empty heap\n            this.coinCounts.forEach((value, index) => {\n                if (value > 0) {\n                    heapNum = index\n                    count = value\n                }\n            })\n        }\n        else if ((this.heapCount === 2) && (this.singletonCount === 1)) {\n            console.log(`\\n--- CASE #2: ALL BUT ONE COINS FROM NON-SINGLETON HEAP`)\n\n            // take all but one coins from the non-singleton heap\n            this.coinCounts.forEach((value, index) => {\n                if (value > 1) {\n                    heapNum = index\n                    count = value - 1\n                }\n            })\n        }\n        else if ((this.heapCount === 3) && (this.singletonCount === 2)) {\n            console.log(`\\n--- CASE #3: TAKE ALL COINS FROM THE ONLY NON-SINGLETON HEAP`)\n\n            // take all coins from the only non-singleton heap\n            this.coinCounts.forEach((value, index) => {\n                if (value > 1) {\n                    heapNum = index\n                    count = value\n                }\n            })\n        }\n\n            // else if ((hm.heapCount === 2) && (hm.singletonCount === 0)\n            //         && (hm.doubletonCount === 1)) {\n            //     console.log(`\\n--- CASE #4: TAKE ALL BUT ONE COINS FROM THE ONLY NON-DOUBLETON HEAP`)\n            //\n            //     // take all but one coins from the only non-doubleton heap\n            //     coinCounts.forEach((value, index) => {\n            //         if (value > 2) {\n            //             heapNum = index\n            //             count = value - 1\n            //         }\n            //     })\n        // }\n        else {\n            console.log(`\\n--- CASE #0: RANDOM MOVE`)\n            const  {heapNum:heapNum1, count:count1} = this.getRandomMove()\n            heapNum = heapNum1\n            count = count1\n        }\n\n        return {heapNum, count}\n    }\n}\n","/**\n * Created by J.Vidya Sagar on 12/11/20.\n */\n\nimport React, { useState } from 'react'\n\nimport CoinHeap from \"../CoinHeap\";\nimport {Button, ButtonGroup, ToggleButton} from \"react-bootstrap\";\n\nimport './style.scss'\nimport TickerTape from \"../TickerTape\";\n\nimport GameState from \"../Backend/gameState\";\nimport Move from \"../Backend/move\";\nimport GamePlay from \"../Backend/gamePlay\"\n\nconst DisplayInstructions = () => (\n    <div id={'gameDescription'}>\n        <p>\n            This is a Man vs Machine game. The game board contains five columns labeled A, B,C,D, and E.\n            Each column contains bricks numbered 1, 2, 3 etc. with brick 1 being the topmost and numbers\n            increasing as you go down the column.\n        </p>\n\n        <p>\n            Each player takes turns at punching one or more bricks from a single column. When a brick is\n            punched, that brick and all the bricks above it are removed from the board.\n            For example if brick number 3 in column B is punched, then brick number 3 and the bricks\n            numbered 2 and 1 sitting above the punched brick 3 in column B, are all removed the board.\n            Bricks if any in the affected column are re-numbered with the top most brick being labeled\n            as the new number 1 brick.\n        </p>\n\n        <p>\n            Aim of the game is to remove, with a last knockout punch, all the bricks from the last\n            remaining column. Player delivering the knockout punch wins the game.\n        </p>\n    </div>\n)\n\nconst FirstMover = ({chooseFirstMover}) => {\n    const [radioValue, setRadioValue] = useState('1');\n\n    const radios = [\n        { name: 'PLAYER', value: '1' },\n        { name: 'COMPUTER', value: '2' },\n    ];\n\n    const changeFirstMover = e => {\n        setRadioValue(e.currentTarget.value)\n\n        if (e.currentTarget.value === '1') {\n            chooseFirstMover('PLAYER')\n        }\n        else {\n            chooseFirstMover('COMPUTER')\n        }\n    }\n\n    return (\n        <>\n            <fieldset>\n                <legend>First mover</legend>\n                <ButtonGroup toggle>\n                    {radios.map((radio, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            className={'playerToggleButton'}\n                            type=\"radio\"\n                            variant=\"secondary\"\n                            name=\"radio\"\n                            value={radio.value}\n                            checked={radioValue === radio.value}\n                            onChange={changeFirstMover}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    ))}\n                </ButtonGroup>\n            </fieldset>\n        </>\n    );\n}\n\n\n// export default function GameBoard({gameMode, nextMover, heapCount: heapCountStr, setPlayAgain}) {\nexport default function GameBoard({gameMode, nextMover, heapCount: heapCountStr, setPlayAgain}) {\n    const [displayInstructions, setDisplayInstructions] = useState(true)\n\n    const [displayFirstMover, setDisplayFirstMover] = useState(true)\n    const [mover, setMover] = useState(nextMover);\n    const [firstMover, setFirstMover] = useState('PLAYER');\n\n    const heapCount = parseInt(heapCountStr)\n    const [coinCounts, setCoinCounts] = useState(GameState.createRandomCoinCounts(heapCount))\n\n    const [movesLog, setMovesLog] = useState([]);\n    const [moveNum, setMoveNum] = useState(0);\n\n    console.log(`GAME_BOARD: START --> GameBoard: start: (heapCount, mover) = (${heapCount}, ${mover})`)\n    console.log(`--> GameBoard: start: (coinCounts) = ([${coinCounts})]`)\n    console.log(`--> GameBoard: start: (mover) = ([${mover})]`)\n\n    const hm = new GameState({heapCount: heapCount, coinCounts: coinCounts})\n\n    const move = new Move(movesLog)\n\n    const makePlayerMove = (heapNum, count) => {\n        const hm = new GameState({heapCount: heapCount, coinCounts: coinCounts})\n        const {newMoveNum,\n            newCoinCounts,\n            newMovesLog,} = move.generateNextMove(hm, moveNum, mover, heapNum, count)\n\n        console.log(`\\nMAKE-PLAYER-MOVE(): (moveNum, heapNum, count) = (${newMoveNum}, ${heapNum}, ${count})`)\n        console.log(`makePlayerMove: (newCoinCounts, coinCounts) = (${newCoinCounts}, ${coinCounts})`)\n\n        setMoveNum(newMoveNum)\n        setCoinCounts([...Array(heapCount).keys()].map(n => newCoinCounts[n]))\n        setMovesLog(newMovesLog)\n        setMover('COMPUTER')\n        setDisplayFirstMover(false)\n    }\n\n    const makeComputerMove = () => {\n        const hm = new GameState({heapCount, coinCounts})\n\n        const gp = new GamePlay(heapCount, coinCounts)\n        const {heapNum, count } = gp.getMove(hm)\n\n        const {newMoveNum,\n            newCoinCounts,\n            newMovesLog,} = move.generateNextMove(hm, moveNum, mover, heapNum, count)\n\n        console.log(`\\nMAKE-COMPUTER-MOVE(): (moveNum, heapNum, count) = (${newMoveNum}, ${heapNum}, ${count})`)\n        console.log(`makeComputerMove: (newCoinCounts, coinCounts) = (${newCoinCounts}, ${coinCounts})`)\n\n        setMoveNum(newMoveNum)\n        setCoinCounts([...Array(heapCount).keys()].map(n => newCoinCounts[n]))\n        setMovesLog(newMovesLog)\n        setMover('PLAYER')\n    }\n\n    const chooseFirstMover = (choice) => {\n        setFirstMover(choice)\n        setMover(choice)\n        setDisplayFirstMover(false)\n    }\n\n    const playAgain = () => {\n        setCoinCounts(GameState.createRandomCoinCounts(heapCount))\n        setMovesLog([])\n        setMoveNum(0)\n        setDisplayInstructions(false)\n        setDisplayFirstMover(true)\n\n        setMover(nextMover)\n    }\n\n    if (!hm.coinsLeft()) {\n        // const winner = (mover === 'COMPUTER') ? 'PLAYER' : 'COMPUTER'\n        const winMessage = (mover === 'COMPUTER') ? 'You win! Congratulations!' : 'Computer wins. Try Again'\n\n        return (\n            <div className={'gameBoardContainer'}>\n                <div className={'gameBoard'}>\n                    {\n                        gameMode === 'practice' &&\n                        <TickerTape  movesLog={movesLog}/>\n                    }\n\n                    {/*<h2>{'------ GAME OVER -------'}</h2>*/}\n                    {/*<h2>{`------ WINNER IS: ${winner } -------`}</h2>*/}\n                    <div id={'winMessage'} >\n                        <h1>{`${winMessage } `}</h1>\n                        <Button variant=\"primary\" id={'playAgain'} size=\"lg\" onClick={playAgain}>Play again</Button>\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n\n    if (mover === 'COMPUTER') {\n        makeComputerMove()\n    }\n\n    return (\n\n        <div className={'gameBoardContainer'}>\n            { displayInstructions && <DisplayInstructions /> }\n\n            <div className={'gameBoard'}>\n                {\n                    hm.heapNames.map((value, index) =>\n                        <CoinHeap\n                            key={`${value}`}\n                            name={`${value}`}\n                            index={`${index}`}\n                            coinCount={coinCounts[index]}\n                            makePlayerMove={makePlayerMove}/>\n                    )\n                }\n            </div>\n\n            { displayFirstMover &&\n                <div id={'firstMover'}>\n                <FirstMover chooseFirstMover={chooseFirstMover}/>\n                {/*<FirstMover chooseFirstMover={chooseFirstMover}/>*/}\n            </div>\n            }\n\n            <div id={`tickerTapeDiv`}>\n                <TickerTape  movesLog={movesLog}/>\n            </div>\n\n\n            {/*{moveNum > 0 && <TickerTape  movesLog={movesLog}/>}*/}\n            {\n                gameMode === 'practice' && moveNum > 0 &&\n                <TickerTape  movesLog={movesLog}/>\n            }\n\n        </div>\n    );\n}\n","import React, { useState } from 'react'\nimport {Button, ButtonGroup, Popover, OverlayTrigger, ToggleButton} from 'react-bootstrap'\nimport GameBoard from \"../GameBoard\";\n\nimport './style.scss'\n\nconst HelpInstructions = () => {\n    const help = `\n                    You will be presented with a game board consisting of 3 heaps of coins.\n                    Each heap contains at least one coin and at most 9 coins.\n\n                    There are two players in the game - you and the computer.\n                    Each player makes moves alternately.\n\n                    On each move, a player chooses a non-empty heap and removes\n                    one or more coins from the heap.\n\n                    The player who takes the last coin on the board is declared\n                    to have won the game.\n    `\n    const instructions = `\n                            At the start of the game, you can choose to go first or let the\n                             computer make the first move.\n                            \n                             Heaps of coins are referred to by letters 'a b c'.\n                            \n                             You indicate your move by entering a string like 'b3',\n                             meaning you want to remove 3 coins from heap b.\n     `\n\n    const textStrings = {\n        'Help': help,\n        'Instructions': instructions\n    }\n    return (\n        <>\n            {['Help', 'Instructions'].map((title) => (\n                <OverlayTrigger\n                    trigger=\"click\"\n                    key={title}\n                    placement={'bottom'}\n                    overlay={\n                        <Popover id={`popover-positioned-bottom`}>\n                            <Popover.Title as=\"h3\">{`${title}`}</Popover.Title>\n                            <Popover.Content>\n                                {`${textStrings[title]}`}\n                            </Popover.Content>\n                        </Popover>\n                    }\n                >\n                    <Button variant=\"secondary\" className={\"helpButton\"}>{title}</Button>\n                </OverlayTrigger>\n            ))}\n        </>\n    )\n}\n\nconst FirstMover = ({chooseFirstMover}) => {\n    const [radioValue, setRadioValue] = useState('1');\n\n    const radios = [\n        { name: 'PLAYER', value: '1' },\n        { name: 'COMPUTER', value: '2' },\n    ];\n\n    const changeFirstMover = e => {\n        setRadioValue(e.currentTarget.value)\n\n        if (e.currentTarget.value === '1') {\n            chooseFirstMover('PLAYER')\n        }\n        else {\n            chooseFirstMover('COMPUTER')\n        }\n    }\n\n    return (\n        <>\n            <fieldset>\n                <legend>First mover</legend>\n                <ButtonGroup toggle>\n                    {radios.map((radio, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            className={'playerToggleButton'}\n                            type=\"radio\"\n                            variant=\"secondary\"\n                            name=\"radio\"\n                            value={radio.value}\n                            checked={radioValue === radio.value}\n                            onChange={changeFirstMover}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    ))}\n                </ButtonGroup>\n            </fieldset>\n        </>\n    );\n}\n\nconst HeapCount = ({chooseHeapCount}) => {\n    const [heapCountValue, setHeapCountValue] = useState('7');\n\n    const heapCountRadios = [\n        { name: '2', value: '2' },\n        { name: '3', value: '3' },\n        { name: '4', value: '4' },\n        { name: '5', value: '5' },\n        { name: '6', value: '6' },\n        { name: '7', value: '7' },\n        { name: '8', value: '8' },\n        { name: '9', value: '9' },\n    ];\n\n    const changeHeapCount = e => {\n        const heapCount = parseInt(e.currentTarget.value)\n        chooseHeapCount(heapCount)\n        setHeapCountValue(e.currentTarget.value)\n    }\n\n    return (\n        <>\n            <fieldset>\n                <legend>Heap count</legend>\n                <ButtonGroup toggle>\n                    {heapCountRadios.map((heapCount, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            className={'heapCountToggleButton'}\n                            type=\"radio\"\n                            variant=\"secondary\"\n\n                            name=\"heapCount\"\n                            value={heapCount.value}\n\n                            checked={heapCountValue === heapCount.value}\n                            onChange={changeHeapCount}\n                        >\n                            {heapCount.name}\n                        </ToggleButton>\n                    ))}\n                </ButtonGroup>\n            </fieldset>\n        </>\n    );\n}\n\nexport default function GameSetup() {\n    const [gameMode, setGameMode] = useState('play');\n    const [firstMover, setFirstMover] = useState('PLAYER');\n    const [heapCount, setHeapCount] = useState('5');\n    const [playAgain, setPlayAgain] = useState(true);\n\n    const chooseFirstMover = (choice) => {\n        setFirstMover(choice)\n    }\n\n    const chooseHeapCount = (choice) => {\n        setHeapCount(choice)\n    }\n\n    console.log(`--> GameSetup: start` )\n\n    if (playAgain) {\n        return (\n            <div id={'topContainer'}>\n                {\n                    gameMode === 'practice' &&\n                        <div>\n                            <div className={'helpInstructions'}>\n                                <HelpInstructions/>\n                            </div>\n\n                            <div id={'firstMover'}>\n                                <FirstMover chooseFirstMover={chooseFirstMover}/>\n                            </div>\n\n                            <div id={'heapCount'}>\n                                <HeapCount chooseHeapCount={chooseHeapCount}/>\n                            </div>\n                        </div>\n                }\n\n                <div>\n                    <GameBoard\n                        gameMode={gameMode}\n                        nextMover={firstMover}\n                        heapCount={heapCount}\n                        setPlayAgain={setPlayAgain}/>\n\n                </div>\n                {/*<div id={'firstMover'}>*/}\n                {/*    <FirstMover chooseFirstMover={chooseFirstMover}/>*/}\n                {/*</div>*/}\n\n            </div>\n        );\n    } else {\n        return (\n            <div id={'topContainer'}>\n                <div className={'helpInstructions'}>\n                    <HelpInstructions/>\n                </div>\n\n                <div>\n                    <h2>Thank you for playing KnockOut!</h2>\n                    <h4>Please visit again!</h4>\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * Created by J.Vidya Sagar on 12/10/20.\n */\n\nimport React from 'react'\nimport GameSetup from \"../GameSetup\"\n\nimport './style.scss'\n\n/***\n Overview\n --------\n You will be presented with a game board consisting of 3 heaps of coins.\n Each heap contains at least one coin and at most 9 coins.\n\n There are two players in the game - you and the computer.\n Each player makes moves alternately.\n\n On each move, a player chooses a non-empty heap and removes\n one or more coins from the heap.\n\n The player who takes the last coin on the board is declared\n to have won the game.\n\n Instructions\n ------------\n At the start of the game, you can choose to go first or let the\n computer make the first move.\n\n Heaps of coins are referred to by letters 'a b c'.\n\n You indicate your move by entering a string like 'b3',\n meaning you want to remove 3 coins from heap b.\n */\n\n\nexport default function NimZap() {\n    console.log(`NimZap: start` )\n\n    return (\n        <div id={'homeContainer'}>\n\n            <GameSetup />\n        </div>\n\n    )\n}\n","import './App.css';\nimport NimZap from \"./components/NimZap\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            KnockOut\n        </header>\n\n        <NimZap />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}